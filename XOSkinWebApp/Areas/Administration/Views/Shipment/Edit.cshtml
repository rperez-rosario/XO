@model XOSkinWebApp.Areas.Administration.Models.ShipOutViewModel

@{
  ViewData["Title"] = "Order Fulfillment";
}

<h1>Order Fulfillment</h1>
<h4>All Dates and Times UTC</h4>
<h4>Fulfillment Status: @Model.ShipmentStatus</h4>
<br />
@Html.ActionLink("Back to List", "Index")
<br />
<br />
<div class="container-fluid">
  <div class="row" style="width: 100%; margin-left: auto; margin-right: auto">
    <div class="col-sm-4">
      <h4>Customer Address</h4>
      <div class="form-group">
        <label class="control-label">Name</label>
        <input asp-for="BillingName" class="form-control" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Address Line 1</label>
        <input asp-for="BillingAddress1" class="form-control" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Address Line 2</label>
        <input asp-for="BillingAddress2" class="form-control" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">City</label>
        <input asp-for="BillingCity" class="form-control" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">State</label>
        <input asp-for="BillingState" class="form-control" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Country</label>
        <input asp-for="BillingCountry" class="form-control" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Postal Code</label>
        <input asp-for="BillingPostalCode" class="form-control" readonly />
      </div>
    </div>
    <div class="col-sm-4" style="padding-left: 10px; padding-right: 10px">
      <h4>Shipping Address, Same? <input asp-for="ShippingAddressSame" id="same-address" type="checkbox" disabled /></h4>
      <div class="form-group">
        <label class="control-label">Recipient's Name</label>
        <input asp-for="ShippingName" class="form-control" id="shipping-name" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Address Line 1</label>
        <input asp-for="ShippingAddress1" class="form-control" id="shipping-address1" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Address Line 2</label>
        <input asp-for="ShippingAddress2" class="form-control" id="shipping-address2" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">City</label>
        <input asp-for="ShippingCity" class="form-control" id="shipping-city" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">State</label>
        <input asp-for="ShippingState" class="form-control" id="shipping-state" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Country</label>
        <input asp-for="ShippingCountry" class="form-control" id="shipping-country" readonly />
      </div>
      <div class="form-group">
        <label class="control-label">Postal Code</label>
        <input asp-for="ShippingPostalCode" class="form-control" id="shipping-postal-code" readonly />
      </div>
    </div>
    <div class="col-sm-4" style="font-weight: 500; line-height: 1.2; font-size: 1.5rem">
      <div style="text-align: right; margin-right: 40px">Order: @Html.Raw("#XO" + (Model.OrderId + 10000))</div>
      <div style="text-align: right; margin-right: 40px">Placed: @Html.Raw(Model.BilledOn.ToShortDateString())</div>
      <br />
      <div style="text-align: right; margin-right: 40px">
        Promised: <span>
          @Html.Raw(Model.ExpectedToShipOn.ToShortDateString())
        </span>
      </div>
      <div style="text-align: right; margin-right: 40px">
        Fulfilled: <span>
          @Html.Raw(Model.ShippedOn == null ? String.Empty : ((DateTime)Model.ShippedOn).ToShortDateString())
        </span>
      </div>
      <div style="text-align: right; margin-right: 40px">
        By: <span style="font-weight: 100">
          @Html.Raw(Model.ShippedBy)
        </span>
      </div>
      <br />
      <div id="map"></div><br />
      <div style="text-align: right; margin-right: 40px">
        <form asp-action="Edit">
          <a class="btn-outline-dark btn" href="@Model.ShipEngineLabelUrl" target="_blank">Print Shipping Label</a>
          <input type="submit" class="btn-outline-dark btn" value="Mark As Fulfilled" disabled="@(Model.ShipmentStatus.Equals("SHIPPED"))" />
          <input type="hidden" asp-for="OrderId" value="@Model.OrderId" />
        </form>
      </div>
    </div>
  </div>
</div>
<h4>Items to Ship With Order</h4>
<table class="table table-responsive" id="OrderItems" style="margin-left: auto; margin-right: auto">
  <thead>
    <tr>
      <th></th>
      <th class="text-nowrap">Product Name</th>
      <th>Quantity</th>
    </tr>
  </thead>
  <tbody>
    @foreach (XOSkinWebApp.Areas.Administration.Models.ShippingLineItemViewModel lineItem in Model.LineItem)
    {
      <tr>
        <td><img src="@lineItem.ImageSource" style="height: 100px; display: inline; float: left" /></td>
        <td style="font-weight: bold">@Html.DisplayFor(modelItem => lineItem.ProductName)</td>
        <td style="width: 170px">
          <div style="display: inline; float: left; font-weight: bold">
            (@lineItem.Quantity)
          </div>
        </td>
      </tr>
    }
  </tbody>
</table>
<script type="text/javascript">
  $(document).ready(function () {
    var table = $('#OrderItems').DataTable({
      paging: false,
      searching: false,
      sort: false,
      bInfo: false
    });

    new $.fn.dataTable.Responsive(table, {
      details: true
    });
  });
</script>

<script type="text/javascript" src="@Model.GoogleMapsUrl" async></script>
<script type="text/javascript">
  function initMap() {
    const shipmentGeolocation = { lat: @Model.ShippingLatitude, lng: @Model.ShippingLongitude };
    const map = new google.maps.Map(document.getElementById("map"), {
      zoom: 14,
      disableDefaultUI: true,
      center: shipmentGeolocation,
      styles: [
        { elementType: "geometry", stylers: [{ color: "#424242" }] },
        { elementType: "labels.text.stroke", stylers: [{ color: "#424242" }] },
        { elementType: "labels.text.fill", stylers: [{ color: "#797979" }] },
        {
          featureType: "administrative.locality",
          elementType: "labels.text.fill",
          stylers: [{ color: "#ffffff" }],
        },
        {
          featureType: "poi",
          elementType: "labels.text.fill",
          stylers: [{ color: "#d5d5d5" }],
        },
        {
          featureType: "poi.park",
          elementType: "geometry",
          stylers: [{ color: "#404040" }],
        },
        {
          featureType: "poi.park",
          elementType: "labels.text.fill",
          stylers: [{ color: "#9b9b9b" }],
        },
        {
          featureType: "road",
          elementType: "geometry",
          stylers: [{ color: "#535353" }],
        },
        {
          featureType: "road",
          elementType: "geometry.stroke",
          stylers: [{ color: "#3c3c3c" }],
        },
        {
          featureType: "road",
          elementType: "labels.text.fill",
          stylers: [{ color: "#b5b5b5" }],
        },
        {
          featureType: "road.highway",
          elementType: "geometry",
          stylers: [{ color: "#797979" }],
        },
        {
          featureType: "road.highway",
          elementType: "geometry.stroke",
          stylers: [{ color: "#393939" }],
        },
        {
          featureType: "road.highway",
          elementType: "labels.text.fill",
          stylers: [{ color: "#f3f3f3" }],
        },
        {
          featureType: "transit",
          elementType: "geometry",
          stylers: [{ color: "#494949" }],
        },
        {
          featureType: "transit.station",
          elementType: "labels.text.fill",
          stylers: [{ color: "#d4d4d4" }],
        },
        {
          featureType: "water",
          elementType: "geometry",
          stylers: [{ color: "#3f3f3f" }],
        },
        {
          featureType: "water",
          elementType: "labels.text.fill",
          stylers: [{ color: "#6e6e6e" }],
        },
        {
          featureType: "water",
          elementType: "labels.text.stroke",
          stylers: [{ color: "#404040" }],
        }]
    });
    const marker = new google.maps.Marker({
      position: shipmentGeolocation,
      map: map,
    });
  }
</script>

<script type="text/javascript">
  $(document).ready(function () {
    function highlight_pending() {
      const page = document.body.innerHTML;
      document.body.innerHTML = page.replace(new RegExp("PENDING", "g"), (match) => `<mark style="background-color: #FF7F7F">${match}</mark>`);
    }

    function highlight_shipped() {
      const page = document.body.innerHTML;
      document.body.innerHTML = page.replace(new RegExp("SHIPPED", "g"), (match) => `<mark style="background-color: #90EE90">${match}</mark>`);
    }

    highlight_pending();
    highlight_shipped();
  });
</script>
